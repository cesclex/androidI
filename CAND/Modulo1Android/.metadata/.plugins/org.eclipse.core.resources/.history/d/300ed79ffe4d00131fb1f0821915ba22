package com.udb.modulo1.clase20;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.PrintWriter;

import android.os.Bundle;
import android.os.Environment;
import android.app.Activity;
import android.view.Menu;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity {

	EditText edtText;
	TextView txtRead;
	String state;
	boolean mediaStorageNoAvailable = false;
	boolean mediaStorageReadonly = false;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		edtText = (EditText) findViewById(R.id.saveInfo);
		txtRead = (TextView) findViewById(R.id.fileinfo);
		
		String state = Environment.getExternalStorageState();
		//se valida si hay SD CArd
		if(state.equalsIgnoreCase(Environment.MEDIA_MOUNTED)){
			mediaStorageNoAvailable = mediaStorageReadonly = true;
		}else if(state.equalsIgnoreCase(Environment.MEDIA_MOUNTED_READ_ONLY)){
			mediaStorageNoAvailable = true;
			mediaStorageReadonly = false;
		}else{
			mediaStorageNoAvailable = mediaStorageReadonly = false;
		}
		
		txtRead.setText("Estado de Media: "+mediaStorageNoAvailable);
		txtRead.append("/ReadOnly: "+mediaStorageReadonly+"\n");
		//se valida si la SDCard esta en modo de lectura
		if(mediaStorageNoAvailable&&mediaStorageReadonly){
			File root = Environment.getExternalStorageDirectory();
			File dir = new File(root.getAbsolutePath()+"/datos");
			if(dir.exists()){
				readFile();
			}
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}
	public void saveInfo(View view) {
		if(mediaStorageNoAvailable&&mediaStorageReadonly){
			try {
				File root = Environment.getExternalStorageDirectory();
				File dir = new File(root.getAbsolutePath()+"/datos");
				if(!dir.exists()){
					dir.mkdir();
				}
				
				File file = new File(dir,"datos1.txt");
				FileOutputStream fos = new FileOutputStream(file);
				PrintWriter pw = new PrintWriter(fos);
				pw.println(txtRead.getText().toString());
				pw.print(edtText.getText().toString());
				pw.flush();
				pw.close();
				fos.close();	
			} catch (Exception e) {
				Toast.makeText(this, "Error: "+e.getMessage(), Toast.LENGTH_SHORT).show();
			}
			edtText.setText("");
			Toast.makeText(this, "Informacion Guardada", Toast.LENGTH_SHORT).show();
		}
	}
	
	public void readInfo(View view){
		readFile();
	}
	
	public void cleanFile(View view){
		if(mediaStorageNoAvailable&&mediaStorageReadonly){
			try{
				File root = Environment.getExternalStorageDirectory();
				File dir = new File(root.getAbsolutePath()+"/datos/datos1.txt");
				if(dir.exists()){
					dir.delete();
				}
			} catch (Exception e) {
				Toast.makeText(this, "Error: "+e.getMessage(), Toast.LENGTH_SHORT).show();
			}
			edtText.setText("");
			txtRead.setText("");
			Toast.makeText(this, "Archivo Eliminado.", Toast.LENGTH_SHORT).show();
		}
	}
	
	public void readFile(){
		if(mediaStorageNoAvailable&&mediaStorageReadonly){
			try {
				File root = Environment.getExternalStorageDirectory();
				File dir = new File(root.getAbsolutePath()+"/datos/datos1.txt");
				BufferedReader reader = null;
				if(dir.exists()){
					reader = new BufferedReader(new FileReader(dir));
				    StringBuilder builder = new StringBuilder();
				    String line = txtRead.getText().toString()+"/n";
				    while ((line = reader.readLine()) != null) {
				      builder.append(line);
				    }
				    txtRead.setText(builder);
				}
			} catch (Exception e) {
				Toast.makeText(this, "Error: "+e.getMessage(), Toast.LENGTH_SHORT).show();
			}
		}
	}

}
